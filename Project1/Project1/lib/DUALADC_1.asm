;;*****************************************************************************
;;*****************************************************************************
;;  DUALADC_1.asm
;;  Version: 2.2, Updated on 2010/12/27 at 15:27:25
;;  Generated by PSoC Designer 5.4.3191
;;
;;  DESCRIPTION: DualADC User Module software implementation file.
;;
;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
;;        arguments and observe the associated "Registers are volatile" policy.
;;        This means it is the caller's responsibility to preserve any values
;;        in the X and A registers that are still needed after the API functions
;;        returns. For Large Memory Model devices it is also the caller's 
;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
;;        MVW_PP registers. Even though some of these registers may not be modified
;;        now, there is no guarantee that will remain the case in future releases.
;;-----------------------------------------------------------------------------
;;  Copyright (c) Cypress Semiconductor 2010. All Rights Reserved.
;;*****************************************************************************
;;*****************************************************************************
include "DUALADC_1.inc"
include "m8c.inc"
include "memory.inc"

;-----------------------------------------------
;  Global Symbols
;-----------------------------------------------

export  DUALADC_1_Start
export _DUALADC_1_Start
export  DUALADC_1_SetPower
export _DUALADC_1_SetPower
export  DUALADC_1_Stop
export _DUALADC_1_Stop
export  DUALADC_1_GetSamples
export _DUALADC_1_GetSamples
export  DUALADC_1_StopAD
export _DUALADC_1_StopAD
export  DUALADC_1_fIsData
export _DUALADC_1_fIsData
export  DUALADC_1_fIsDataAvailable
export _DUALADC_1_fIsDataAvailable
export  DUALADC_1_iGetData1
export _DUALADC_1_iGetData1
export  DUALADC_1_iGetData2
export _DUALADC_1_iGetData2
export  DUALADC_1_ClearFlag
export _DUALADC_1_ClearFlag
export  DUALADC_1_iGetData1ClearFlag
export _DUALADC_1_iGetData1ClearFlag
export  DUALADC_1_iGetData2ClearFlag
export _DUALADC_1_iGetData2ClearFlag
export  DUALADC_1_SetResolution
export _DUALADC_1_SetResolution

;-----------------------------------------------
;  EQUATES
;-----------------------------------------------

; Calctime parameters
wCalcTime:     equ   DUALADC_1_bCALCTIME

; Constants
LowByte:       equ 1
HighByte:      equ 0

AREA UserModules (ROM, REL)
.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: DUALADC_1_Start
;  FUNCTION NAME: DUALADC_1_SetPower
;
;  DESCRIPTION:
;  Applies power setting to the module's analog PSoc block.
;
;-----------------------------------------------------------------------------
;
;  ARGUMENTS:
;   A  Contains power level setting 0 to 3
;
;  RETURNS:  none
;
;  SIDE EFFECTS:
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16 
;    functions.
;          
;    Currently only the page pointer registers listed below are modified: 
;          CUR_PP
;
;  THEORY of OPERATION or PROCEDURE:
;
;-----------------------------------------------------------------------------
 DUALADC_1_Start:
_DUALADC_1_Start:
 DUALADC_1_SetPower:
_DUALADC_1_SetPower:
   RAM_PROLOGUE RAM_USE_CLASS_4
   RAM_PROLOGUE RAM_USE_CLASS_2
   RAM_SETPAGE_CUR >DUALADC_1_bfStatus

   and   A,DUALADC_1_bfPOWERMASK                     ; Mask only the valid power setting bits
   mov   X, SP                                       ; Get location of next location on stack
   push  A                                           ; Save power value on temp location

                                                     ; Set power for ADC1
   mov   A, reg[DUALADC_1_bfADC1cr3]                 ; Get current value of ADC1cr3
   and   A, ~DUALADC_1_bfPOWERMASK                   ; Mask off old power value
   or    A, [X]                                      ; OR in new power value
   or    A, f0h                                      ; Make sure other register is set correctly
   mov   reg[DUALADC_1_bfADC1cr3], A                 ; Reload CR with new power value

                                                     ; Set power for ADC2
   mov   A, reg[DUALADC_1_bfADC2cr3]                 ; Get current value of ADC2cr3
   and   A, ~DUALADC_1_bfPOWERMASK                   ; Mask off old power value
   or    A, [X]                                      ; OR in new power value
   or    A, f0h                                      ; Make sure other register is set correctly
   mov   reg[DUALADC_1_bfADC2cr3], A                 ; Reload CR with new power value

   tst   reg[DUALADC_1_bfADC1cr2], DUALADC_1_fRES_SET
   jz    .DoNotLoadRes
   mov   A,DUALADC_1_bNUMBITS - DUALADC_1_bMINRES               ; get and set the resolution
   mov   [DUALADC_1_bfStatus], A              ; place it in the status variable
.DoNotLoadRes:

   pop   A                                           ; Restore the stack and power value
   RAM_EPILOGUE RAM_USE_CLASS_2
   RAM_EPILOGUE RAM_USE_CLASS_4
   ret
.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: DUALADC_1_Stop
;
;  DESCRIPTION:
;  Removes power from the module's analog PSoc blocks, but the digital
;  blocks keep on running.
;
;-----------------------------------------------------------------------------
;
;  ARGUMENTS: None
;
;  RETURNS:   NA
;
;  SIDE EFFECTS:
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16 
;    functions.
;
 DUALADC_1_Stop:
_DUALADC_1_Stop:
   RAM_PROLOGUE RAM_USE_CLASS_1
   and   reg[DUALADC_1_bfADC1cr3], ~DUALADC_1_bfPOWERMASK
   and   reg[DUALADC_1_bfADC2cr3], ~DUALADC_1_bfPOWERMASK
   RAM_EPILOGUE RAM_USE_CLASS_1
   ret
.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: DUALADC_1_Get_Samples
;
;  DESCRIPTION:
;  Starts the A/D convertor and will place data is memory.  A flag
;  is set whenever a new data value is available.
;
;-----------------------------------------------------------------------------
;
;  ARGUMENTS:
;  A  Number of samples to be taken.  A zero will cause the ADC to run
;     continuously.  A flag is set whenever a new data values are available.
;
;  RETURNS:  NA
;
;  SIDE EFFECTS:
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16 
;    functions.
;          
;    Currently only the page pointer registers listed below are modified: 
;          CUR_PP
;
 DUALADC_1_GetSamples:
_DUALADC_1_GetSamples:
   RAM_PROLOGUE RAM_USE_CLASS_4
   RAM_SETPAGE_CUR >DUALADC_1_bSampC
   mov   [DUALADC_1_bSampC], A                             ; Store sample count
                                                           ; Interrupts, Put A/D in reset
   mov   A,[DUALADC_1_bfStatus]                            ; get and set the resolution
   and   A,DUALADC_1_bRES_MASK
   add   A,DUALADC_1_bMINRES
   call  DUALADC_1_SetResolution

DUALADC_1_LoadMSBCounter:                                  ; The PWM has been setup by SetResolution, now set the upper
                                                           ; counter which will be the same as the period.
                                                           ; Reset MSB of counter to most negative value

   mov   A,reg[DUALADC_1_bPWM_IntTime_MSB]                 ; Get MSB of PWM and move it into RAM
   mov   [DUALADC_1_cCounter1U], A                         ; Use counter as temp location
   mov   A, 00h                                            ; Load A with zero for the calculation
   sub   A, [DUALADC_1_cCounter1U]                         ; 0 - MSB_PWM = MSB_of_most_neg_value
   asr   A                                                 ; Half the range (+ and -)
IF (DUALADC_1_DATA_FORMAT)
   mov   [DUALADC_1_cCounter1U], A                         ; Place result back into MSB of counter1
   mov   [DUALADC_1_cCounter2U], A                         ; Place result back into MSB of counter2
ELSE
   mov   [DUALADC_1_cCounter1U], 00h                       ; Always start at zero for unsigned values for ADC1
   mov   [DUALADC_1_cCounter2U], 00h                       ; Always start at zero for unsigned values for ADC2
ENDIF
   mov   A, reg[DUALADC_1_bPWM_IntTime_LSB]                ; Dummy Read  - required do not remove
   mov   reg[DUALADC_1_bPeriod1], FFh                      ; Make sure counter1 starts at FF
   mov   reg[DUALADC_1_bPeriod2], FFh                      ; Make sure counter2 starts at FF

   and   reg[DUALADC_1_bfADC1cr3],~DUALADC_1_fFSW0         ; Take Integrator out of reset
   and   reg[DUALADC_1_bfADC2cr3],~DUALADC_1_fFSW0         ; Take Integrator out of reset
IF DUALADC_1_NoAZ
    and  reg[DUALADC_1_bfADC1cr2],~DUALADC_1_fAutoZero     ; Take Integrator out of AutoZero
    and  reg[DUALADC_1_bfADC2cr2],~DUALADC_1_fAutoZero     ; Take Integrator out of AutoZero
ENDIF

   or    reg[DUALADC_1_bCounter1_CR0], (DUALADC_1_fDBLK_ENABLE|DUALADC_1_fPULSE_WIDE)   ; Enable the Counter
   or    reg[DUALADC_1_bCounter2_CR0], (DUALADC_1_fDBLK_ENABLE|DUALADC_1_fPULSE_WIDE)   ; Enable the Counter
   or    reg[DUALADC_1_fPWM_LSB_CR0], DUALADC_1_fDBLK_ENABLE          ; Enable PWM
   or    reg[DUALADC_1_bfPWM16_INT_REG], DUALADC_1_bfPWM16_Mask      ; Enable PWM and Counter interrupts
   or    reg[DUALADC_1_bfCounter1_INT_REG], DUALADC_1_bfCounter1_Mask
   or    reg[DUALADC_1_bfCounter2_INT_REG], DUALADC_1_bfCounter2_Mask

   ret
   RAM_EPILOGUE RAM_USE_CLASS_4
.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: DUALADC_1_StopAD
;
;  DESCRIPTION:
;  Completely shuts down the A/D is an orderly manner.  Both the
;  Timer and Counter are disabled and their interrupts are deactivated.
;
;-----------------------------------------------------------------------------
;
;  ARGUMENTS:  None
;
;  RETURNS: NA
;
;  SIDE EFFECTS:
;     The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16 
;    functions.
;
 DUALADC_1_StopAD:
_DUALADC_1_StopAD:
   RAM_PROLOGUE RAM_USE_CLASS_1
   and   reg[DUALADC_1_fPWM_LSB_CR0], ~DUALADC_1_fDBLK_ENABLE     ; Disable the PWM

   and   reg[DUALADC_1_bCounter1_CR0], ~DUALADC_1_fDBLK_ENABLE           ; Disable the Counter
   and   reg[DUALADC_1_bCounter2_CR0], ~DUALADC_1_fDBLK_ENABLE           ; Disable the Counter

IF DUALADC_1_NoAZ
   or    reg[DUALADC_1_bfADC1cr2], DUALADC_1_fAutoZero         ; Put the Integrator into Autozero mode
   or    reg[DUALADC_1_bfADC2cr2], DUALADC_1_fAutoZero         ; Put the Integrator into Autozero mode
ENDIF

   or   reg[DUALADC_1_bfADC1cr3], DUALADC_1_fFSW0              ; Put Integrator into reset
   or   reg[DUALADC_1_bfADC2cr3], DUALADC_1_fFSW0              ; Put Integrator into reset

   push A
   M8C_DisableIntMask DUALADC_1_bfPWM16_INT_REG, DUALADC_1_bfPWM16_Mask      ; Disable interrupts
   M8C_DisableIntMask DUALADC_1_bfCounter1_INT_REG, DUALADC_1_bfCounter1_Mask
   M8C_DisableIntMask DUALADC_1_bfCounter2_INT_REG, DUALADC_1_bfCounter1_Mask
   pop  A
   
   RAM_EPILOGUE RAM_USE_CLASS_1
   ret
.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: DUALADC_1_fIsData
;  FUNCTION NAME: DUALADC_1_fIsDataAvailable
;
;  DESCRIPTION:
;  Returns the status of the A/D Data is set whenever a new data
;  value is available.
;
;-----------------------------------------------------------------------------
;
;  ARGUMENTS: None
;
;  RETURNS:
;  A  Returns data status  A == 0 no data available
;                          A != 0 data available
;
;  SIDE EFFECTS:
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16 
;    functions.
;          
;    Currently only the page pointer registers listed below are modified:
;          CUR_PP
;
 DUALADC_1_fIsData:
_DUALADC_1_fIsData:
 DUALADC_1_fIsDataAvailable:
_DUALADC_1_fIsDataAvailable:
   RAM_PROLOGUE RAM_USE_CLASS_4
   RAM_SETPAGE_CUR >DUALADC_1_bfStatus
   mov   A, [DUALADC_1_bfStatus]                      ; Get status byte
   and   A, DUALADC_1_fDATA_READY                     ; Mask off other bits
   RAM_EPILOGUE RAM_USE_CLASS_4
   ret
.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: DUALADC_1_iGetData1ClearFlag
;  FUNCTION NAME: DUALADC_1_iGetData1
;
;  DESCRIPTION:
;  Returns the data from channel-1 of A/D.  Does not check if data is available.
;  iGetData1ClearFlag clears the result ready flag as well.
;
;-----------------------------------------------------------------------------
;
;  ARGUMENTS: None
;
;  RETURNS:
;    A  Contains the LSB of the 16 bit result
;    X  Contains the MSB of the 16 bit result
;
;  SIDE EFFECTS:
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16 
;    functions.
;          
;    Currently only the page pointer registers listed below are modified:
;          CUR_PP
;
 DUALADC_1_iGetData1ClearFlag:
_DUALADC_1_iGetData1ClearFlag:
   RAM_PROLOGUE RAM_USE_CLASS_4
   RAM_SETPAGE_CUR >DUALADC_1_iResult1 
   and   [DUALADC_1_bfStatus], ~DUALADC_1_fDATA_READY  ; Clear Data ready bit
   mov   X, [(DUALADC_1_iResult1 + HighByte)]
   mov   A, [(DUALADC_1_iResult1 + LowByte)]
   RAM_EPILOGUE RAM_USE_CLASS_4
   ret

 DUALADC_1_iGetData1:
_DUALADC_1_iGetData1:
   RAM_PROLOGUE RAM_USE_CLASS_4
   RAM_SETPAGE_CUR >DUALADC_1_iResult1  
   mov   X, [(DUALADC_1_iResult1 + HighByte)]
   mov   A, [(DUALADC_1_iResult1 + LowByte)]
   RAM_EPILOGUE RAM_USE_CLASS_4
   ret
.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: DUALADC_1_iGetData2ClearFlag
;  FUNCTION NAME: DUALADC_1_iGetData2
;
;  DESCRIPTION:
;  Returns the data from channel-1 of A/D.  Does not check if data is available.
;  iGetData1ClearFlag clears the result ready flag as well.
;
;-----------------------------------------------------------------------------
;
;  ARGUMENTS: None
;
;  RETURNS:
;    A  Contains the LSB of the 16 bit result
;    X  Contains the MSB of the 16 bit result
;
;  SIDE EFFECTS:
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16 
;    functions.
;          
;    Currently only the page pointer registers listed below are modified:
;          CUR_PP
;
 DUALADC_1_iGetData2ClearFlag:
_DUALADC_1_iGetData2ClearFlag:
   RAM_PROLOGUE RAM_USE_CLASS_4
   RAM_SETPAGE_CUR >DUALADC_1_iResult1  
   and   [DUALADC_1_bfStatus], ~DUALADC_1_fDATA_READY  ; Clear Data ready bit
   mov   X, [(DUALADC_1_iResult2 + HighByte)]
   mov   A, [(DUALADC_1_iResult2 + LowByte)]
   RAM_EPILOGUE RAM_USE_CLASS_4
   ret

 DUALADC_1_iGetData2:
_DUALADC_1_iGetData2:
   RAM_PROLOGUE RAM_USE_CLASS_4
   RAM_SETPAGE_CUR >DUALADC_1_iResult1  
   mov   X, [(DUALADC_1_iResult2 + HighByte)]
   mov   A, [(DUALADC_1_iResult2 + LowByte)]
   RAM_EPILOGUE RAM_USE_CLASS_4
   ret
.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: DUALADC_1_ClearFlag
;
;  DESCRIPTION:
;  Clears the data ready flag.
;
;-----------------------------------------------------------------------------
;
;  ARGUMENTS: None
;
;  RETURNS: NA
;
;  SIDE EFFECTS:
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16 
;    functions.
;          
;    Currently only the page pointer registers listed below are modified:
;          CUR_PP
;
 DUALADC_1_ClearFlag:
_DUALADC_1_ClearFlag:
   RAM_PROLOGUE RAM_USE_CLASS_4
   RAM_SETPAGE_CUR >DUALADC_1_bfStatus  
   and   [DUALADC_1_bfStatus], ~DUALADC_1_fDATA_READY  ; Clear Data ready bit
   RAM_EPILOGUE RAM_USE_CLASS_4
   ret
.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: DUALADC_1_SetResolution
;
;  DESCRIPTION:
;  Sets A/D resolution between 7 and 13 bits.
;
;-----------------------------------------------------------------------------
;
;  ARGUMENTS:
;  A  Passes the number of bits of resolution, between 7 and 13.
;
;  RETURNS:  NA
;
;  SIDE EFFECTS:
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16 
;    functions.
;          
;    Currently only the page pointer registers listed below are modified: 
;          CUR_PP
;
;    This function halts the PWM and the counter to sync the A/D , but
;    does not re-enable the counter or PWM. To restart the A/D, "Get_Samples"
;    should be called. It sets the resolution for both channels at the
;    same time.
;
 DUALADC_1_SetResolution:
_DUALADC_1_SetResolution:
   RAM_PROLOGUE RAM_USE_CLASS_4
   RAM_SETPAGE_CUR >DUALADC_1_bfStatus  

   and   reg[DUALADC_1_bfADC1cr2], ~DUALADC_1_fRES_SET
   
   call  DUALADC_1_StopAD                          ; Stop the A/D if it is running
   mov   [DUALADC_1_bfStatus], 00h                 ; and clear status and old resolution

                                                   ; Check for resolution to be within min and max values
   cmp   A,DUALADC_1_bMINRES                       ; Check low end of resolution
   jnc   DUALADC_1_CHECKHI
   mov   A,DUALADC_1_bMINRES                       ; Too low - load legal low value
   jmp   DUALADC_1_RES_OK

DUALADC_1_CHECKHI:                                 ; Check high end of resolution
   cmp   A,DUALADC_1_bMAXRES
   jc    DUALADC_1_RES_OK
   mov   A,DUALADC_1_bMAXRES                       ; Too high - load legal Max value

DUALADC_1_RES_OK:
                                                   ; Calculate compare value for the PWM which
                                                   ; computes the integrate time
   sub   A, DUALADC_1_bMINRES                      ; Normalize with min resolution
   or    [DUALADC_1_bfStatus], A
                                                   ; Since min resolution is 7, 2^^7 = 128, the clock
                                                   ; is running 4x so 128*4=512 or 0x0200
   add   A,01h                                     ; The MSB is 02h.
   mov   X,A
   mov   A,01h

DUALADC_1_CALC_INTTIME:                            ; Now shift the MSB left for every bit of resolution of min (7).
   asl   A
   dec   X
   jnz   DUALADC_1_CALC_INTTIME

DUALADC_1_LOAD_INTTIME:                            ; Load compare value and Calc time into registers
                                                   ; Since minimum resolution is 7 bits, this value will always start at 0
   mov   reg[DUALADC_1_bPWM_IntTime_LSB], 00h
   mov   reg[DUALADC_1_bPWM_IntTime_MSB], A

                                                   ; Load the CalcTime into the PWM Period
   mov   reg[DUALADC_1_bPWM_Period_LSB], <wCalcTime
   add   A, >wCalcTime
   mov   reg[DUALADC_1_bPWM_Period_MSB],A
   RAM_EPILOGUE RAM_USE_CLASS_4
   ret
.ENDSECTION

; End of File DUALADC_1.asm
