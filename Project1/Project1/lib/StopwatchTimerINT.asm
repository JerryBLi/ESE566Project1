;;*****************************************************************************
;;*****************************************************************************
;;  FILENAME: StopwatchTimerINT.asm
;;   Version: 2.6, Updated on 2015/3/4 at 22:27:47
;;  Generated by PSoC Designer 5.4.3191
;;
;;  DESCRIPTION: Timer16 Interrupt Service Routine
;;-----------------------------------------------------------------------------
;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
;;*****************************************************************************
;;*****************************************************************************

include "m8c.inc"
include "memory.inc"
include "StopwatchTimer.inc"


;-----------------------------------------------
;  Global Symbols
;-----------------------------------------------
export  _StopwatchTimer_ISR


AREA InterruptRAM (RAM,REL,CON)

;@PSoC_UserCode_INIT@ (Do not change this line.)
;---------------------------------------------------
; Insert your custom declarations below this banner
;---------------------------------------------------

;------------------------
; Includes
;------------------------

	
;------------------------
;  Constant Definitions
;------------------------


;------------------------
; Variable Allocation
;------------------------


;---------------------------------------------------
; Insert your custom declarations above this banner
;---------------------------------------------------
;@PSoC_UserCode_END@ (Do not change this line.)


AREA UserModules (ROM, REL)

;-----------------------------------------------------------------------------
;  FUNCTION NAME: _StopwatchTimer_ISR
;
;  DESCRIPTION: Unless modified, this implements only a null handler stub.
;
;-----------------------------------------------------------------------------
;

_StopwatchTimer_ISR:

   ;@PSoC_UserCode_BODY@ (Do not change this line.)
  
   ;---------------------------------------------------
   ;----------------STOPWATCH TIMER ISR----------------
   ; We increment currNumDeciSecs everytime the ISR is called
   ; if the value reaches 10, we update seconds, minutes, and hours
   ;---------------------------------------------------
   
   ;preserve registers
   push A
   push X
   mov A, reg[CUR_PP]
   push A
   
   inc [currNumDeciSecs] 
   cmp [currNumDeciSecs], 10 ;Is the count of 1/10ths of seconds == to 10? If so that means 1 sec has passed
   jz updateSec
   jmp restore_stopwatchTimer_ISR
   
   updateSec:
   mov [currNumDeciSecs],0 ;clear the deciseconds
   inc [currNumSecs] ;1 second has passed
   cmp [currNumSecs],60 ;has 1 minute passed?
   jz updateMin
   jmp restore_stopwatchTimer_ISR
   
   updateMin:
   mov [currNumSecs],0 ;clear the seconds
   inc [currNumMins] ;1 min has passed
   cmp [currNumMins],60 ;has 1 hour passed?
   jz updateHour
   jmp restore_stopwatchTimer_ISR
   
   updateHour:
   mov [currNumMins],0
   inc [currNumHours] ;1 hour has passed
   
   restore_stopwatchTimer_ISR:  
   ;restore registers
   pop A
   mov reg[CUR_PP],A
   pop X
   pop A
   
   ;---------------------------------------------------
   ; Insert a lcall to a C function below this banner
   ; and un-comment the lines between these banners
   ;---------------------------------------------------
   
   ;PRESERVE_CPU_CONTEXT
   ;lcall _My_C_Function
   ;RESTORE_CPU_CONTEXT
   
   ;---------------------------------------------------
   ; Insert a lcall to a C function above this banner
   ; and un-comment the lines between these banners
   ;---------------------------------------------------
   ;@PSoC_UserCode_END@ (Do not change this line.)

   reti


; end of file StopwatchTimerINT.asm
